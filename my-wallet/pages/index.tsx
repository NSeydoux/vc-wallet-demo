import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'

import { SessionProvider, LoginButton, LogoutButton, useSession } from "@inrupt/solid-ui-react";
import { useState } from 'react';

const LogButtonToggle = () => {
  const currentSession = useSession();
  if(!currentSession.session.info.isLoggedIn) {
    return (
      <LoginButton 
        oidcIssuer={"https://login.inrupt.com"}
        redirectUrl="http://localhost:3000"  
      />
    )
  }
  return <LogoutButton />;
}

const LoggedInStatus = () => {
  const currentSession = useSession();
  if(currentSession.session.info.isLoggedIn) {
    return (
      <p className={styles.description}>
        Currently logged in as 
        <code className={styles.code}>{currentSession.session.info.webId}</code>
      </p>
    )
  }
  return (<p className={styles.description}>
      Not currently logged in. 
    </p>
  );
}

/**
 * Expected interaction: 
 *  - Get the exchange endpoint
 *  - POST to the exchange endpoint, and get the next endpoint
 *  - PUT to the following endpoint
 */
const handleExchange = async (e: MouseEvent, discoveryEndpoint: string, addVpToWallet: (vp: any) => void) => {
  e.preventDefault();
  const discoveryVpr = await global.fetch(discoveryEndpoint).then((response) => response.json());
  const exchangeEndpoint = discoveryVpr.interact.service[0].serviceEndpoint;
  const initVpr = await global.fetch(exchangeEndpoint, {
    method: "POST",
    body: JSON.stringify(discoveryVpr)
  }).then((response) => response.json());
  const followUpEndpoint = initVpr.interact.service[0].serviceEndpoint;
  const responseVp = await global.fetch(followUpEndpoint, {
    method: "PUT",
  }).then((response) => response.json());
  addVpToWallet(responseVp);
}

const DiscoverExchange = (props: {addVpToWallet: (vp: any) => void}) => {
  const [discoveryEndpoint, setDiscoveryEndpoint] = useState("http://localhost:3001/api/discover");

  return (
    <form>
      <input
        type="text"
        value={discoveryEndpoint}
        onChange={(e) => {
          setDiscoveryEndpoint(e.target.value);
        }}
      />
      <button onClick={(e) => handleExchange(e, discoveryEndpoint, props.addVpToWallet)}>Perform exchange</button>
    </form>
  )
}

const Wallet = (props: {wallet: any[]}) => {
  const { wallet } = props;
  const vpList = wallet.map((vp) => (
      <li key={vp.id}>
        <details>
          <pre>{JSON.stringify(vp, null, 2)}</pre>
          <summary>{vp.id}</summary>
        </details>
      </li>
    )
  );
  return <ul>{vpList}</ul>
}

const PageContent = () => {
  const [wallet, setWallet] = useState<any[]>([])

  const addVpToWallet = (vp: any) => {
    setWallet((prev) => [...prev, vp])
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        
        <nav><LogButtonToggle /></nav>

        <h1 className={styles.title}>
          My VC Wallet
        </h1>
        
        <LoggedInStatus />

        <DiscoverExchange addVpToWallet={addVpToWallet}/>

        <Wallet wallet={wallet} />

      </main>
    </div>
  )
}

const Home: NextPage = () => {
  return (
    <SessionProvider>
      <PageContent />
    </SessionProvider>
  )
}

export default Home
